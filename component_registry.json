{
  "timestamp": "2025-08-23T19:03:09.201973",
  "components": {
    "data_generators": {
      "ARFIMAModel": {
        "class_name": "ARFIMAModel",
        "module_name": "models.data_models.arfima.arfima_model",
        "file_path": "models\\data_models\\arfima\\arfima_model.py",
        "constructor_params": {
          "d": {
            "type": "any",
            "default": null,
            "required": true
          },
          "ar_params": {
            "type": "any",
            "default": null,
            "required": false
          },
          "ma_params": {
            "type": "any",
            "default": null,
            "required": false
          },
          "sigma": {
            "type": "any",
            "default": 1.0,
            "required": false
          },
          "method": {
            "type": "any",
            "default": "spectral",
            "required": false
          }
        },
        "type": "stochastic",
        "description": "\n    Autoregressive Fractionally Integrated Moving Average (ARFIMA) model.\n    \n    ARFIMA(p,d,q) process combines autoregressive (AR), fractionally integrated (FI),\n    and moving average (MA) components. The fractional integration parameter d\n    controls long-range dependence.\n    \n    Parameters\n    ----------\n    d : float\n        Fractional integration parameter (-0.5 < d < 0.5)\n    ar_params : List[float], optional\n        Autoregressive parameters (default: [])\n    ma_params : List[float], optional\n        Moving average parameters (default: [])\n    sigma : float, optional\n        Standard deviation of innovations (default: 1.0)\n    method : str, optional\n        Generation method (default: 'spectral')\n    "
      },
      "BaseModel": {
        "class_name": "BaseModel",
        "module_name": "models.data_models.mrw.mrw_model",
        "file_path": "models\\data_models\\mrw\\mrw_model.py",
        "constructor_params": {},
        "type": "stochastic",
        "description": "\n    Abstract base class for all stochastic models.\n    \n    This class defines the interface that all stochastic models must implement,\n    including methods for parameter validation, data generation, and model\n    information retrieval.\n    "
      },
      "FractionalBrownianMotion": {
        "class_name": "FractionalBrownianMotion",
        "module_name": "models.data_models.fbm.fbm_model",
        "file_path": "models\\data_models\\fbm\\fbm_model.py",
        "constructor_params": {
          "H": {
            "type": "any",
            "default": null,
            "required": true
          },
          "sigma": {
            "type": "any",
            "default": 1.0,
            "required": false
          },
          "method": {
            "type": "any",
            "default": "davies_harte",
            "required": false
          }
        },
        "type": "stochastic",
        "description": "\n    Fractional Brownian Motion (fBm) model.\n    \n    Fractional Brownian motion is a self-similar Gaussian process with\n    stationary increments. It is characterized by the Hurst parameter H,\n    where 0 < H < 1.\n    \n    Parameters\n    ----------\n    H : float\n        Hurst parameter (0 < H < 1)\n        - H = 0.5: Standard Brownian motion\n        - H > 0.5: Persistent (long-range dependence)\n        - H < 0.5: Anti-persistent\n    sigma : float, optional\n        Standard deviation of the process (default: 1.0)\n    method : str, optional\n        Method for generating fBm:\n        - 'davies_harte': Davies-Harte method (default)\n        - 'cholesky': Cholesky decomposition method\n        - 'circulant': Circulant embedding method\n    "
      },
      "FractionalGaussianNoise": {
        "class_name": "FractionalGaussianNoise",
        "module_name": "models.data_models.fgn.fgn_model",
        "file_path": "models\\data_models\\fgn\\fgn_model.py",
        "constructor_params": {
          "H": {
            "type": "any",
            "default": null,
            "required": true
          },
          "sigma": {
            "type": "any",
            "default": 1.0,
            "required": false
          },
          "method": {
            "type": "any",
            "default": "circulant",
            "required": false
          }
        },
        "type": "stochastic",
        "description": "\n    Fractional Gaussian Noise (fGn) generator.\n\n    fGn is the stationary increment process of fractional Brownian motion (fBm).\n    This class generates fGn directly using the circulant embedding approach on\n    the autocovariance function of fGn.\n    "
      },
      "MultifractalRandomWalk": {
        "class_name": "MultifractalRandomWalk",
        "module_name": "models.data_models.mrw.mrw_model",
        "file_path": "models\\data_models\\mrw\\mrw_model.py",
        "constructor_params": {
          "H": {
            "type": "any",
            "default": null,
            "required": true
          },
          "lambda_param": {
            "type": "any",
            "default": null,
            "required": true
          },
          "sigma": {
            "type": "any",
            "default": 1.0,
            "required": false
          },
          "method": {
            "type": "any",
            "default": "cascade",
            "required": false
          }
        },
        "type": "stochastic",
        "description": "\n    Multifractal Random Walk (MRW) model.\n    \n    MRW is a multifractal process that exhibits scale-invariant properties\n    and is characterized by a log-normal volatility cascade. It is defined\n    by the Hurst parameter H and the intermittency parameter \u03bb.\n    \n    Parameters\n    ----------\n    H : float\n        Hurst parameter (0 < H < 1)\n    lambda_param : float\n        Intermittency parameter (\u03bb > 0)\n    sigma : float, optional\n        Base volatility (default: 1.0)\n    method : str, optional\n        Generation method (default: 'cascade')\n    "
      }
    },
    "estimators": {
      "BaseMLEstimator": {
        "class_name": "BaseMLEstimator",
        "module_name": "analysis.machine_learning.transformer_estimator",
        "file_path": "analysis\\machine_learning\\transformer_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Abstract base class for all machine learning-based estimators.\n    \n    This class defines the interface that all ML estimators must implement,\n    including methods for feature extraction, model training, prediction,\n    and performance evaluation.\n    "
      },
      "CNNEstimator": {
        "class_name": "CNNEstimator",
        "module_name": "analysis.machine_learning.cnn_estimator",
        "file_path": "analysis\\machine_learning\\cnn_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Convolutional Neural Network estimator for Hurst parameter estimation.\n    \n    This estimator uses a 1D CNN to learn the mapping from time series data\n    to Hurst parameters. It's particularly effective for capturing local\n    temporal patterns and dependencies.\n    "
      },
      "GradientBoostingEstimator": {
        "class_name": "GradientBoostingEstimator",
        "module_name": "analysis.machine_learning.gradient_boosting_estimator",
        "file_path": "analysis\\machine_learning\\gradient_boosting_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Gradient Boosting estimator for Hurst parameter estimation.\n    \n    This estimator uses gradient boosting to learn the mapping\n    from time series features to Hurst parameters.\n    "
      },
      "GRUEstimator": {
        "class_name": "GRUEstimator",
        "module_name": "analysis.machine_learning.gru_estimator",
        "file_path": "analysis\\machine_learning\\gru_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "GRU estimator for Hurst parameter estimation using PyTorch."
      },
      "LSTMEstimator": {
        "class_name": "LSTMEstimator",
        "module_name": "analysis.machine_learning.lstm_estimator",
        "file_path": "analysis\\machine_learning\\lstm_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    LSTM estimator for Hurst parameter estimation using PyTorch.\n    "
      },
      "NeuralNetworkEstimator": {
        "class_name": "NeuralNetworkEstimator",
        "module_name": "analysis.machine_learning.neural_network_estimator",
        "file_path": "analysis\\machine_learning\\neural_network_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Neural Network estimator for Hurst parameter estimation.\n    \n    This estimator uses a multi-layer perceptron (MLP) to learn the mapping\n    from time series features to Hurst parameters.\n    "
      },
      "RandomForestEstimator": {
        "class_name": "RandomForestEstimator",
        "module_name": "analysis.machine_learning.random_forest_estimator",
        "file_path": "analysis\\machine_learning\\random_forest_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Random Forest estimator for Hurst parameter estimation.\n    \n    This estimator uses an ensemble of decision trees to learn the mapping\n    from time series features to Hurst parameters.\n    "
      },
      "SVREstimator": {
        "class_name": "SVREstimator",
        "module_name": "analysis.machine_learning.svr_estimator",
        "file_path": "analysis\\machine_learning\\svr_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Support Vector Regression estimator for Hurst parameter estimation.\n    \n    This estimator uses support vector regression to learn the mapping\n    from time series features to Hurst parameters.\n    "
      },
      "TransformerEstimator": {
        "class_name": "TransformerEstimator",
        "module_name": "analysis.machine_learning.transformer_estimator",
        "file_path": "analysis\\machine_learning\\transformer_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Transformer estimator for Hurst parameter estimation.\n    \n    This estimator uses a transformer architecture to learn the mapping from \n    time series data to Hurst parameters. It's particularly effective for \n    capturing long-range dependencies and temporal patterns.\n    "
      },
      "BaseEstimator": {
        "class_name": "BaseEstimator",
        "module_name": "models.estimators.base_estimator",
        "file_path": "models\\estimators\\base_estimator.py",
        "constructor_params": {},
        "category": "other",
        "description": "\n    Abstract base class for all parameter estimators.\n    \n    This class defines the interface that all estimators must implement,\n    including methods for parameter estimation, confidence intervals,\n    and result reporting.\n    "
      },
      "MFDFAEstimator": {
        "class_name": "MFDFAEstimator",
        "module_name": "analysis.multifractal.mfdfa.mfdfa_estimator",
        "file_path": "analysis\\multifractal\\mfdfa\\mfdfa_estimator.py",
        "constructor_params": {
          "q_values": {
            "type": "any",
            "default": null,
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "min_scale": {
            "type": "any",
            "default": 8,
            "required": false
          },
          "max_scale": {
            "type": "any",
            "default": 50,
            "required": false
          },
          "num_scales": {
            "type": "any",
            "default": 15,
            "required": false
          },
          "order": {
            "type": "any",
            "default": 1,
            "required": false
          }
        },
        "category": "multifractal",
        "description": "\n    Multifractal Detrended Fluctuation Analysis (MFDFA) estimator.\n    \n    MFDFA extends DFA to analyze multifractal properties by computing\n    fluctuation functions for different moments q.\n    "
      },
      "MultifractalWaveletLeadersEstimator": {
        "class_name": "MultifractalWaveletLeadersEstimator",
        "module_name": "analysis.multifractal.wavelet_leaders.multifractal_wavelet_leaders_estimator",
        "file_path": "analysis\\multifractal\\wavelet_leaders\\multifractal_wavelet_leaders_estimator.py",
        "constructor_params": {
          "wavelet": {
            "type": "any",
            "default": "db4",
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "min_scale": {
            "type": "any",
            "default": 2,
            "required": false
          },
          "max_scale": {
            "type": "any",
            "default": 32,
            "required": false
          },
          "num_scales": {
            "type": "any",
            "default": 10,
            "required": false
          },
          "q_values": {
            "type": "any",
            "default": null,
            "required": false
          }
        },
        "category": "wavelet",
        "description": "\n    Multifractal Wavelet Leaders estimator.\n    \n    This estimator uses wavelet leaders to analyze multifractal properties\n    of time series data, providing robust estimates of the multifractal spectrum.\n    "
      },
      "GPHEstimator": {
        "class_name": "GPHEstimator",
        "module_name": "analysis.spectral.gph.gph_estimator",
        "file_path": "analysis\\spectral\\gph\\gph_estimator.py",
        "constructor_params": {
          "min_freq_ratio": {
            "type": "any",
            "default": 0.01,
            "required": false
          },
          "max_freq_ratio": {
            "type": "any",
            "default": 0.1,
            "required": false
          },
          "use_welch": {
            "type": "any",
            "default": true,
            "required": false
          },
          "window": {
            "type": "any",
            "default": "hann",
            "required": false
          },
          "nperseg": {
            "type": "any",
            "default": null,
            "required": false
          },
          "apply_bias_correction": {
            "type": "any",
            "default": true,
            "required": false
          }
        },
        "category": "spectral",
        "description": "\n    Geweke-Porter-Hudak (GPH) Hurst parameter estimator.\n    \n    This estimator uses log-periodogram regression with the regressor\n    log(4*sin^2(\u03c9/2)) to estimate the fractional differencing parameter d,\n    then converts to Hurst parameter as H = d + 0.5.\n    \n    Parameters\n    ----------\n    min_freq_ratio : float, optional (default=0.01)\n        Minimum frequency ratio (relative to Nyquist) for fitting.\n    max_freq_ratio : float, optional (default=0.1)\n        Maximum frequency ratio (relative to Nyquist) for fitting.\n    use_welch : bool, optional (default=True)\n        Whether to use Welch's method for PSD estimation.\n    window : str, optional (default='hann')\n        Window function for Welch's method.\n    nperseg : int, optional (default=None)\n        Length of each segment for Welch's method. If None, uses n/8.\n    apply_bias_correction : bool, optional (default=True)\n        Whether to apply bias correction for finite sample effects.\n    "
      },
      "PeriodogramEstimator": {
        "class_name": "PeriodogramEstimator",
        "module_name": "analysis.spectral.periodogram.periodogram_estimator",
        "file_path": "analysis\\spectral\\periodogram\\periodogram_estimator.py",
        "constructor_params": {
          "min_freq_ratio": {
            "type": "any",
            "default": 0.01,
            "required": false
          },
          "max_freq_ratio": {
            "type": "any",
            "default": 0.1,
            "required": false
          },
          "use_welch": {
            "type": "any",
            "default": true,
            "required": false
          },
          "window": {
            "type": "any",
            "default": "hann",
            "required": false
          },
          "nperseg": {
            "type": "any",
            "default": null,
            "required": false
          },
          "use_multitaper": {
            "type": "any",
            "default": false,
            "required": false
          },
          "n_tapers": {
            "type": "any",
            "default": 3,
            "required": false
          }
        },
        "category": "spectral",
        "description": "\n    Periodogram-based Hurst parameter estimator.\n    \n    This estimator computes the power spectral density (PSD) of the time series\n    and fits a power law to the low-frequency portion to estimate the Hurst\n    parameter. The relationship is: PSD(f) ~ f^(-beta) where beta = 2H - 1.\n    \n    Parameters\n    ----------\n    min_freq_ratio : float, optional (default=0.01)\n        Minimum frequency ratio (relative to Nyquist) for fitting.\n    max_freq_ratio : float, optional (default=0.1)\n        Maximum frequency ratio (relative to Nyquist) for fitting.\n    use_welch : bool, optional (default=True)\n        Whether to use Welch's method for PSD estimation.\n    window : str, optional (default='hann')\n        Window function for Welch's method.\n    nperseg : int, optional (default=None)\n        Length of each segment for Welch's method. If None, uses n/8.\n    use_multitaper : bool, optional (default=False)\n        Whether to use multi-taper method for PSD estimation.\n    n_tapers : int, optional (default=3)\n        Number of tapers for multi-taper method.\n    "
      },
      "WhittleEstimator": {
        "class_name": "WhittleEstimator",
        "module_name": "analysis.spectral.whittle.whittle_estimator",
        "file_path": "analysis\\spectral\\whittle\\whittle_estimator.py",
        "constructor_params": {
          "min_freq_ratio": {
            "type": "any",
            "default": 0.01,
            "required": false
          },
          "max_freq_ratio": {
            "type": "any",
            "default": 0.1,
            "required": false
          },
          "use_local_whittle": {
            "type": "any",
            "default": true,
            "required": false
          },
          "use_welch": {
            "type": "any",
            "default": true,
            "required": false
          },
          "window": {
            "type": "any",
            "default": "hann",
            "required": false
          },
          "nperseg": {
            "type": "any",
            "default": null,
            "required": false
          }
        },
        "category": "spectral",
        "description": "\n    Whittle-based Hurst parameter estimator.\n    \n    This estimator uses maximum likelihood estimation in the frequency domain\n    to estimate the Hurst parameter. It can use either the standard Whittle\n    likelihood or the local Whittle variant.\n    \n    Parameters\n    ----------\n    min_freq_ratio : float, optional (default=0.01)\n        Minimum frequency ratio (relative to Nyquist) for fitting.\n    max_freq_ratio : float, optional (default=0.1)\n        Maximum frequency ratio (relative to Nyquist) for fitting.\n    use_local_whittle : bool, optional (default=True)\n        Whether to use local Whittle estimation (more robust).\n    use_welch : bool, optional (default=True)\n        Whether to use Welch's method for PSD estimation.\n    window : str, optional (default='hann')\n        Window function for Welch's method.\n    nperseg : int, optional (default=None)\n        Length of each segment for Welch's method. If None, uses n/8.\n    "
      },
      "DFAEstimator": {
        "class_name": "DFAEstimator",
        "module_name": "analysis.temporal.dfa.dfa_estimator",
        "file_path": "analysis\\temporal\\dfa\\dfa_estimator.py",
        "constructor_params": {
          "min_box_size": {
            "type": "any",
            "default": 4,
            "required": false
          },
          "max_box_size": {
            "type": "any",
            "default": null,
            "required": false
          },
          "box_sizes": {
            "type": "any",
            "default": null,
            "required": false
          },
          "polynomial_order": {
            "type": "any",
            "default": 1,
            "required": false
          }
        },
        "category": "temporal",
        "description": "\n    Detrended Fluctuation Analysis (DFA) estimator.\n    \n    DFA is a method for quantifying long-range correlations in time series\n    that is robust to non-stationarities. It estimates the Hurst parameter\n    by analyzing the scaling behavior of detrended fluctuations.\n    \n    Parameters\n    ----------\n    min_box_size : int, optional\n        Minimum box size for analysis (default: 4)\n    max_box_size : int, optional\n        Maximum box size for analysis (default: None, will use n/4)\n    box_sizes : array-like, optional\n        Specific box sizes to use (default: None)\n    polynomial_order : int, optional\n        Order of polynomial for detrending (default: 1)\n    "
      },
      "DMAEstimator": {
        "class_name": "DMAEstimator",
        "module_name": "analysis.temporal.dma.dma_estimator",
        "file_path": "analysis\\temporal\\dma\\dma_estimator.py",
        "constructor_params": {
          "min_window_size": {
            "type": "any",
            "default": 4,
            "required": false
          },
          "max_window_size": {
            "type": "any",
            "default": null,
            "required": false
          },
          "window_sizes": {
            "type": "any",
            "default": null,
            "required": false
          },
          "overlap": {
            "type": "any",
            "default": true,
            "required": false
          }
        },
        "category": "temporal",
        "description": "\n    Detrended Moving Average (DMA) estimator for Hurst parameter.\n    \n    The DMA method is a variant of DFA that uses a moving average instead\n    of polynomial fitting for detrending. It is computationally efficient\n    and robust to various types of non-stationarity.\n    \n    The method works by:\n    1. Computing the cumulative sum of the time series\n    2. For each window size, calculating the moving average\n    3. Detrending by subtracting the moving average\n    4. Computing the fluctuation function\n    5. Fitting a power law relationship: F(n) ~ n^H\n    \n    Parameters\n    ----------\n    min_window_size : int, default=4\n        Minimum window size for DMA calculation.\n    max_window_size : int, optional\n        Maximum window size. If None, uses n/4 where n is data length.\n    window_sizes : List[int], optional\n        Specific window sizes to use. If provided, overrides min/max.\n    overlap : bool, default=True\n        Whether to use overlapping windows for moving average.\n    "
      },
      "HiguchiEstimator": {
        "class_name": "HiguchiEstimator",
        "module_name": "analysis.temporal.higuchi.higuchi_estimator",
        "file_path": "analysis\\temporal\\higuchi\\higuchi_estimator.py",
        "constructor_params": {
          "min_k": {
            "type": "any",
            "default": 2,
            "required": false
          },
          "max_k": {
            "type": "any",
            "default": null,
            "required": false
          },
          "k_values": {
            "type": "any",
            "default": null,
            "required": false
          }
        },
        "category": "temporal",
        "description": "\n    Higuchi Method estimator for fractal dimension and Hurst parameter.\n    \n    The Higuchi method is an efficient algorithm for estimating the fractal\n    dimension of a time series. It is based on the relationship between the\n    length of the curve and the time interval used to measure it.\n    \n    The method works by:\n    1. Computing the curve length for different time intervals k\n    2. Fitting a power law relationship: L(k) ~ k^(-D)\n    3. The fractal dimension D is related to the Hurst parameter H by: H = 2 - D\n    \n    Parameters\n    ----------\n    min_k : int, default=2\n        Minimum time interval for curve length calculation.\n    max_k : int, optional\n        Maximum time interval. If None, uses n/4 where n is data length.\n    k_values : List[int], optional\n        Specific k values to use. If provided, overrides min/max.\n    "
      },
      "RSEstimator": {
        "class_name": "RSEstimator",
        "module_name": "analysis.temporal.rs.rs_estimator",
        "file_path": "analysis\\temporal\\rs\\rs_estimator.py",
        "constructor_params": {
          "min_window_size": {
            "type": "any",
            "default": 10,
            "required": false
          },
          "max_window_size": {
            "type": "any",
            "default": null,
            "required": false
          },
          "window_sizes": {
            "type": "any",
            "default": null,
            "required": false
          },
          "overlap": {
            "type": "any",
            "default": false,
            "required": false
          }
        },
        "category": "temporal",
        "description": "\n    Rescaled Range (R/S) Analysis estimator.\n    \n    The R/S method estimates the Hurst parameter by analyzing the scaling\n    behavior of the rescaled range statistic across different time scales.\n    \n    Parameters\n    ----------\n    min_scale : int, optional\n        Minimum scale (window size) to use (default: 10)\n    max_scale : int, optional\n        Maximum scale (window size) to use (default: None, uses n/4)\n    num_scales : int, optional\n        Number of scales to use (default: 20)\n    "
      },
      "CWTEstimator": {
        "class_name": "CWTEstimator",
        "module_name": "analysis.wavelet.cwt.cwt_estimator",
        "file_path": "analysis\\wavelet\\cwt\\cwt_estimator.py",
        "constructor_params": {
          "wavelet": {
            "type": "any",
            "default": "cmor1.5-1.0",
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "confidence": {
            "type": "any",
            "default": 0.95,
            "required": false
          }
        },
        "category": "wavelet",
        "description": "\n    Continuous Wavelet Transform (CWT) Analysis estimator.\n    \n    This estimator uses continuous wavelet transforms to analyze the scaling behavior\n    of time series data and estimate the Hurst parameter for fractional processes.\n    \n    Attributes:\n        wavelet (str): Wavelet type to use for continuous transform\n        scales (np.ndarray): Array of scales for wavelet analysis\n        confidence (float): Confidence level for confidence intervals\n    "
      },
      "WaveletLogVarianceEstimator": {
        "class_name": "WaveletLogVarianceEstimator",
        "module_name": "analysis.wavelet.log_variance.wavelet_log_variance_estimator",
        "file_path": "analysis\\wavelet\\log_variance\\wavelet_log_variance_estimator.py",
        "constructor_params": {
          "wavelet": {
            "type": "any",
            "default": "db4",
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "confidence": {
            "type": "any",
            "default": 0.95,
            "required": false
          }
        },
        "category": "wavelet",
        "description": "\n    Wavelet Log Variance Analysis estimator.\n    \n    This estimator uses wavelet decomposition to analyze the log-transformed variance\n    of wavelet coefficients at different scales, which can be used to estimate the \n    Hurst parameter for fractional processes with improved statistical properties.\n    \n    Attributes:\n        wavelet (str): Wavelet type to use for decomposition\n        scales (List[int]): List of scales for wavelet analysis\n        confidence (float): Confidence level for confidence intervals\n    "
      },
      "WaveletVarianceEstimator": {
        "class_name": "WaveletVarianceEstimator",
        "module_name": "analysis.wavelet.variance.wavelet_variance_estimator",
        "file_path": "analysis\\wavelet\\variance\\wavelet_variance_estimator.py",
        "constructor_params": {
          "wavelet": {
            "type": "any",
            "default": "db4",
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "confidence": {
            "type": "any",
            "default": 0.95,
            "required": false
          }
        },
        "category": "wavelet",
        "description": "\n    Wavelet Variance Analysis estimator.\n    \n    This estimator uses wavelet decomposition to analyze the variance of wavelet\n    coefficients at different scales, which can be used to estimate the Hurst\n    parameter for fractional processes.\n    \n    Attributes:\n        wavelet (str): Wavelet type to use for decomposition\n        scales (List[int]): List of scales for wavelet analysis\n        confidence (float): Confidence level for confidence intervals\n    "
      },
      "WaveletWhittleEstimator": {
        "class_name": "WaveletWhittleEstimator",
        "module_name": "analysis.wavelet.whittle.wavelet_whittle_estimator",
        "file_path": "analysis\\wavelet\\whittle\\wavelet_whittle_estimator.py",
        "constructor_params": {
          "wavelet": {
            "type": "any",
            "default": "db4",
            "required": false
          },
          "scales": {
            "type": "any",
            "default": null,
            "required": false
          },
          "confidence": {
            "type": "any",
            "default": 0.95,
            "required": false
          }
        },
        "category": "wavelet",
        "description": "\n    Wavelet Whittle Analysis estimator.\n    \n    This estimator combines wavelet decomposition with Whittle likelihood estimation\n    to provide robust estimation of the Hurst parameter for fractional processes.\n    \n    Attributes:\n        wavelet (str): Wavelet type to use for decomposition\n        scales (List[int]): List of scales for wavelet analysis\n        confidence (float): Confidence level for confidence intervals\n    "
      }
    },
    "neural_components": {}
  },
  "summary": {
    "data_generators": 5,
    "estimators": 23,
    "neural_components": 0
  }
}